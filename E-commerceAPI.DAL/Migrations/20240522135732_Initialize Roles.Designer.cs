// <auto-generated />
using System;
using E_CommerceProject.DAL.Data.Context;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace E_commerceAPI.DAL.Migrations
{
    [DbContext(typeof(ECommerceContext))]
    [Migration("20240522135732_Initialize Roles")]
    partial class InitializeRoles
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("CartItem", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<int>("CartId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.HasKey("ID");

                    b.HasIndex("CartId");

                    b.HasIndex("ProductId");

                    b.ToTable("CartItems");

                    b.HasData(
                        new
                        {
                            ID = 1,
                            CartId = 6,
                            CreatedDate = new DateTime(2024, 5, 22, 16, 57, 32, 179, DateTimeKind.Local).AddTicks(4456),
                            Price = 4500m,
                            ProductId = 9,
                            Quantity = 2
                        },
                        new
                        {
                            ID = 2,
                            CartId = 6,
                            CreatedDate = new DateTime(2024, 5, 22, 16, 57, 32, 179, DateTimeKind.Local).AddTicks(4515),
                            Price = 15000m,
                            ProductId = 10,
                            Quantity = 1
                        },
                        new
                        {
                            ID = 3,
                            CartId = 2,
                            CreatedDate = new DateTime(2024, 5, 22, 16, 57, 32, 179, DateTimeKind.Local).AddTicks(4520),
                            Price = 66666m,
                            ProductId = 1,
                            Quantity = 1
                        },
                        new
                        {
                            ID = 4,
                            CartId = 2,
                            CreatedDate = new DateTime(2024, 5, 22, 16, 57, 32, 179, DateTimeKind.Local).AddTicks(4524),
                            Price = 59750m,
                            ProductId = 2,
                            Quantity = 1
                        },
                        new
                        {
                            ID = 5,
                            CartId = 3,
                            CreatedDate = new DateTime(2024, 5, 22, 16, 57, 32, 179, DateTimeKind.Local).AddTicks(4528),
                            Price = 40000m,
                            ProductId = 6,
                            Quantity = 2
                        },
                        new
                        {
                            ID = 6,
                            CartId = 3,
                            CreatedDate = new DateTime(2024, 5, 22, 16, 57, 32, 179, DateTimeKind.Local).AddTicks(4533),
                            Price = 20000m,
                            ProductId = 3,
                            Quantity = 1
                        },
                        new
                        {
                            ID = 7,
                            CartId = 4,
                            CreatedDate = new DateTime(2024, 5, 22, 16, 57, 32, 179, DateTimeKind.Local).AddTicks(4537),
                            Price = 12000m,
                            ProductId = 5,
                            Quantity = 3
                        },
                        new
                        {
                            ID = 8,
                            CartId = 4,
                            CreatedDate = new DateTime(2024, 5, 22, 16, 57, 32, 179, DateTimeKind.Local).AddTicks(4540),
                            Price = 85000m,
                            ProductId = 4,
                            Quantity = 1
                        },
                        new
                        {
                            ID = 9,
                            CartId = 5,
                            CreatedDate = new DateTime(2024, 5, 22, 16, 57, 32, 179, DateTimeKind.Local).AddTicks(4544),
                            Price = 8000m,
                            ProductId = 7,
                            Quantity = 1
                        },
                        new
                        {
                            ID = 10,
                            CartId = 5,
                            CreatedDate = new DateTime(2024, 5, 22, 16, 57, 32, 179, DateTimeKind.Local).AddTicks(4549),
                            Price = 55000m,
                            ProductId = 8,
                            Quantity = 1
                        });
                });

            modelBuilder.Entity("E_CommerceProject.DAL.Data.Models.Cart", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("ID");

                    b.HasIndex("UserId")
                        .IsUnique();

                    b.ToTable("Carts");

                    b.HasData(
                        new
                        {
                            ID = 1,
                            UserId = "1"
                        },
                        new
                        {
                            ID = 2,
                            UserId = "2"
                        },
                        new
                        {
                            ID = 3,
                            UserId = "3"
                        },
                        new
                        {
                            ID = 4,
                            UserId = "4"
                        },
                        new
                        {
                            ID = 5,
                            UserId = "5"
                        },
                        new
                        {
                            ID = 6,
                            UserId = "6"
                        },
                        new
                        {
                            ID = 7,
                            UserId = "7"
                        },
                        new
                        {
                            ID = 8,
                            UserId = "8"
                        },
                        new
                        {
                            ID = 9,
                            UserId = "9"
                        },
                        new
                        {
                            ID = 10,
                            UserId = "10"
                        });
                });

            modelBuilder.Entity("E_CommerceProject.DAL.Data.Models.Category", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Categories");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Description = "Home Appliances category description",
                            Name = "Home Appliances"
                        },
                        new
                        {
                            Id = 2,
                            Description = "Sports category description",
                            Name = "Sports"
                        },
                        new
                        {
                            Id = 3,
                            Description = "Smartphones category description",
                            Name = "Smartphones"
                        },
                        new
                        {
                            Id = 4,
                            Description = "Laptops category description",
                            Name = "Laptops"
                        },
                        new
                        {
                            Id = 5,
                            Description = "Books category description",
                            Name = "Books"
                        },
                        new
                        {
                            Id = 6,
                            Description = "Furniture category description",
                            Name = "Furniture"
                        },
                        new
                        {
                            Id = 7,
                            Description = "Clothing category description",
                            Name = "Clothing"
                        },
                        new
                        {
                            Id = 8,
                            Description = "Toys category description",
                            Name = "Toys"
                        },
                        new
                        {
                            Id = 9,
                            Description = "Electronics category description",
                            Name = "Electronics"
                        },
                        new
                        {
                            Id = 10,
                            Description = "Beauty & Health category description",
                            Name = "Beauty & Health"
                        });
                });

            modelBuilder.Entity("E_CommerceProject.DAL.Data.Models.Order", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<DateTime>("CreatedDateTime")
                        .HasColumnType("datetime2");

                    b.Property<decimal>("TotalPrice")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("ID");

                    b.HasIndex("UserId");

                    b.ToTable("Orders");

                    b.HasData(
                        new
                        {
                            ID = 1,
                            CreatedDateTime = new DateTime(2024, 5, 22, 16, 57, 32, 179, DateTimeKind.Local).AddTicks(4558),
                            TotalPrice = 32000m,
                            UserId = "1"
                        },
                        new
                        {
                            ID = 2,
                            CreatedDateTime = new DateTime(2024, 5, 22, 16, 57, 32, 179, DateTimeKind.Local).AddTicks(4564),
                            TotalPrice = 34000m,
                            UserId = "2"
                        },
                        new
                        {
                            ID = 3,
                            CreatedDateTime = new DateTime(2024, 5, 22, 16, 57, 32, 179, DateTimeKind.Local).AddTicks(4568),
                            TotalPrice = 18000m,
                            UserId = "3"
                        },
                        new
                        {
                            ID = 4,
                            CreatedDateTime = new DateTime(2024, 5, 22, 16, 57, 32, 179, DateTimeKind.Local).AddTicks(4572),
                            TotalPrice = 59750m,
                            UserId = "4"
                        },
                        new
                        {
                            ID = 5,
                            CreatedDateTime = new DateTime(2024, 5, 22, 16, 57, 32, 179, DateTimeKind.Local).AddTicks(4575),
                            TotalPrice = 80000m,
                            UserId = "5"
                        },
                        new
                        {
                            ID = 6,
                            CreatedDateTime = new DateTime(2024, 5, 22, 16, 57, 32, 179, DateTimeKind.Local).AddTicks(4580),
                            TotalPrice = 3500m,
                            UserId = "6"
                        },
                        new
                        {
                            ID = 7,
                            CreatedDateTime = new DateTime(2024, 5, 22, 16, 57, 32, 179, DateTimeKind.Local).AddTicks(4584),
                            TotalPrice = 33000m,
                            UserId = "7"
                        },
                        new
                        {
                            ID = 8,
                            CreatedDateTime = new DateTime(2024, 5, 22, 16, 57, 32, 179, DateTimeKind.Local).AddTicks(4589),
                            TotalPrice = 15000m,
                            UserId = "8"
                        },
                        new
                        {
                            ID = 9,
                            CreatedDateTime = new DateTime(2024, 5, 22, 16, 57, 32, 179, DateTimeKind.Local).AddTicks(4592),
                            TotalPrice = 2500m,
                            UserId = "9"
                        },
                        new
                        {
                            ID = 10,
                            CreatedDateTime = new DateTime(2024, 5, 22, 16, 57, 32, 179, DateTimeKind.Local).AddTicks(4597),
                            TotalPrice = 7166m,
                            UserId = "10"
                        });
                });

            modelBuilder.Entity("E_CommerceProject.DAL.Data.Models.OrderItem", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("OrderId")
                        .HasColumnType("int");

                    b.Property<decimal>("PriceTotal")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("OrderId");

                    b.HasIndex("ProductId");

                    b.ToTable("OrderItems");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            OrderId = 7,
                            PriceTotal = 66000m,
                            ProductId = 1,
                            Quantity = 0
                        },
                        new
                        {
                            Id = 2,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            OrderId = 7,
                            PriceTotal = 119500m,
                            ProductId = 2,
                            Quantity = 0
                        },
                        new
                        {
                            Id = 3,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            OrderId = 3,
                            PriceTotal = 40000m,
                            ProductId = 6,
                            Quantity = 0
                        },
                        new
                        {
                            Id = 4,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            OrderId = 3,
                            PriceTotal = 20000m,
                            ProductId = 3,
                            Quantity = 0
                        },
                        new
                        {
                            Id = 5,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            OrderId = 4,
                            PriceTotal = 24000m,
                            ProductId = 5,
                            Quantity = 0
                        },
                        new
                        {
                            Id = 6,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            OrderId = 4,
                            PriceTotal = 85000m,
                            ProductId = 4,
                            Quantity = 0
                        },
                        new
                        {
                            Id = 7,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            OrderId = 5,
                            PriceTotal = 8000m,
                            ProductId = 7,
                            Quantity = 0
                        },
                        new
                        {
                            Id = 8,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            OrderId = 5,
                            PriceTotal = 55000m,
                            ProductId = 8,
                            Quantity = 0
                        },
                        new
                        {
                            Id = 9,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            OrderId = 6,
                            PriceTotal = 9000m,
                            ProductId = 9,
                            Quantity = 0
                        },
                        new
                        {
                            Id = 10,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            OrderId = 6,
                            PriceTotal = 30000m,
                            ProductId = 10,
                            Quantity = 0
                        });
                });

            modelBuilder.Entity("E_CommerceProject.DAL.Data.Models.Product", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CategoryId")
                        .HasColumnType("int");

                    b.Property<int>("Count")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ImageUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(10,2)");

                    b.Property<int>("Rate")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.ToTable("Products");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CategoryId = 5,
                            Count = 20,
                            Description = "8 GB Storage, Waterproof, 6.8-inch Display, Adjustable Warm Light - Black",
                            Name = "Amazon Kindle Paperwhite",
                            Price = 12000m,
                            Rate = 4
                        },
                        new
                        {
                            Id = 2,
                            CategoryId = 10,
                            Count = 12,
                            Description = "Electric, Rechargeable, 5 Modes, Travel Case - White",
                            Name = "Philips Sonicare DiamondClean Toothbrush",
                            Price = 15000m,
                            Rate = 5
                        },
                        new
                        {
                            Id = 3,
                            CategoryId = 1,
                            Count = 15,
                            Description = "Industry Leading Noise Canceling Overhead Headphones, Wireless, Bluetooth, 30 Hours Battery Life - Black",
                            Name = "Sony WH-1000XM4",
                            Price = 20000m,
                            Rate = 5
                        },
                        new
                        {
                            Id = 4,
                            CategoryId = 2,
                            Count = 8,
                            Description = "2-in-1 Laptop, 11th Gen Intel Core i7, 16GB RAM, 1TB SSD, 13.3-inch FHD Touch Display, Windows 10 - Nightfall Black",
                            Name = "HP Spectre x360",
                            Price = 85000m,
                            Rate = 4
                        },
                        new
                        {
                            Id = 5,
                            CategoryId = 2,
                            Count = 5,
                            Description = "Apple 2022 MacBook Air laptop with M2 chip: 13.6-inch Liquid Retina display, 8GB RAM, 256GB SSD storage, 1080p FaceTime HD camera. Works with iPhone and iPad; Space Grey;",
                            Name = "Apple 2022 MacBook",
                            Price = 59750m,
                            Rate = 4
                        },
                        new
                        {
                            Id = 6,
                            CategoryId = 4,
                            Count = 7,
                            Description = "9 kg, Front Load, Fully Automatic, EcoSilence Drive, 1400 RPM - White",
                            Name = "Bosch Serie 6 Washing Machine",
                            Price = 40000m,
                            Rate = 4
                        },
                        new
                        {
                            Id = 7,
                            CategoryId = 7,
                            Count = 30,
                            Description = "Men's Running Shoes, Comfortable Fit, Durable, Size 10 - Black",
                            Name = "Nike Air Zoom Pegasus 38",
                            Price = 8000m,
                            Rate = 5
                        },
                        new
                        {
                            Id = 8,
                            CategoryId = 8,
                            Count = 10,
                            Description = "Building Kit, Collectible Model, Ages 16+, 7541 Pieces",
                            Name = "LEGO Star Wars Millennium Falcon",
                            Price = 55000m,
                            Rate = 5
                        },
                        new
                        {
                            Id = 9,
                            CategoryId = 9,
                            Count = 25,
                            Description = "Official Size, Indoor Use, High-Quality Composite Leather - Orange",
                            Name = "Wilson Evolution Game Basketball",
                            Price = 4500m,
                            Rate = 4
                        },
                        new
                        {
                            Id = 10,
                            CategoryId = 5,
                            Count = 20,
                            Description = "8 GB Storage, Waterproof, 6.8-inch Display, Adjustable Warm Light - Black",
                            Name = "Amazon Kindle Paperwhite",
                            Price = 12000m,
                            Rate = 4
                        });
                });

            modelBuilder.Entity("E_CommerceProject.DAL.Data.Models.User", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Age")
                        .HasColumnType("int");

                    b.Property<int>("CartID")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<int>("Gender")
                        .HasColumnType("int");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("UserRole")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "1",
                            AccessFailedCount = 0,
                            Address = "123 Street,NewYork City",
                            Age = 23,
                            CartID = 0,
                            ConcurrencyStamp = "6f74b512-e208-4f28-9c63-be019e2ea417",
                            Email = "aya@example.com",
                            EmailConfirmed = false,
                            Gender = 1,
                            LockoutEnabled = false,
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "19a8c1b0-b90c-4e94-8a88-b37cf8c0e668",
                            TwoFactorEnabled = false,
                            UserName = "aya",
                            UserRole = "User"
                        },
                        new
                        {
                            Id = "2",
                            AccessFailedCount = 0,
                            Address = "456 Avenue, Town",
                            Age = 25,
                            CartID = 0,
                            ConcurrencyStamp = "32f61906-a103-48ea-8a33-080624b668a3",
                            Email = "farah@example.com",
                            EmailConfirmed = false,
                            Gender = 1,
                            LockoutEnabled = false,
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "8b09074e-96cc-40e5-b661-0c38ed214c92",
                            TwoFactorEnabled = false,
                            UserName = "farah",
                            UserRole = "User"
                        },
                        new
                        {
                            Id = "3",
                            AccessFailedCount = 0,
                            Address = "789 Boulevard, Metropolis",
                            Age = 35,
                            CartID = 0,
                            ConcurrencyStamp = "0146f1e5-cff9-41a2-9597-74e16151890b",
                            Email = "rahma@example.com",
                            EmailConfirmed = false,
                            Gender = 1,
                            LockoutEnabled = false,
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "8b75d18e-9f95-4218-9036-04060eb1f489",
                            TwoFactorEnabled = false,
                            UserName = "rahma",
                            UserRole = "User"
                        },
                        new
                        {
                            Id = "4",
                            AccessFailedCount = 0,
                            Address = "1010 Way, Village",
                            Age = 28,
                            CartID = 0,
                            ConcurrencyStamp = "974badd6-c42a-488a-bb89-fdfdac887478",
                            Email = "amal@example.com",
                            EmailConfirmed = false,
                            Gender = 1,
                            LockoutEnabled = false,
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "3458074e-5027-4a89-ae81-b1e4eb1bb786",
                            TwoFactorEnabled = false,
                            UserName = "amal",
                            UserRole = "User"
                        },
                        new
                        {
                            Id = "5",
                            AccessFailedCount = 0,
                            Address = "1111 Road, Hamlet",
                            Age = 22,
                            CartID = 0,
                            ConcurrencyStamp = "02943b41-268e-460a-930d-64f30a66a69e",
                            Email = "fadia@example.com",
                            EmailConfirmed = false,
                            Gender = 1,
                            LockoutEnabled = false,
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "e862c736-d9b4-4674-a67d-97a4ff8f8c3f",
                            TwoFactorEnabled = false,
                            UserName = "fadia",
                            UserRole = "User"
                        },
                        new
                        {
                            Id = "6",
                            AccessFailedCount = 0,
                            Address = "1212 Parkway, Borough",
                            Age = 40,
                            CartID = 0,
                            ConcurrencyStamp = "1e274251-7714-4297-8020-2968dee96088",
                            Email = "rawan@example.com",
                            EmailConfirmed = false,
                            Gender = 0,
                            LockoutEnabled = false,
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "14cd99e5-617c-45ec-9954-613c72d9213d",
                            TwoFactorEnabled = false,
                            UserName = "zain",
                            UserRole = "User"
                        },
                        new
                        {
                            Id = "7",
                            AccessFailedCount = 0,
                            Address = "1313 Plaza, City",
                            Age = 33,
                            CartID = 0,
                            ConcurrencyStamp = "eaf5dd48-81ae-4424-b567-fc33867fd6d0",
                            Email = "menna@example.com",
                            EmailConfirmed = false,
                            Gender = 1,
                            LockoutEnabled = false,
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "3b1854bc-89b0-4bb8-bfb3-7ca88f520bae",
                            TwoFactorEnabled = false,
                            UserName = "menna",
                            UserRole = "User"
                        },
                        new
                        {
                            Id = "8",
                            AccessFailedCount = 0,
                            Address = "1414 Terrace, Town",
                            Age = 27,
                            CartID = 0,
                            ConcurrencyStamp = "afbffae9-328a-4b5c-8745-1be647a3b67d",
                            Email = "ahmed@example.com",
                            EmailConfirmed = false,
                            Gender = 0,
                            LockoutEnabled = false,
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "7d7ec415-4a5e-4765-9b59-b5ecc899a259",
                            TwoFactorEnabled = false,
                            UserName = "ahmed",
                            UserRole = "User"
                        },
                        new
                        {
                            Id = "9",
                            AccessFailedCount = 0,
                            Address = "1515 Court, Metropolis",
                            Age = 24,
                            CartID = 0,
                            ConcurrencyStamp = "86246ca7-f874-46b5-bd5c-bed9cd55aa85",
                            Email = "mohamed@example.com",
                            EmailConfirmed = false,
                            Gender = 0,
                            LockoutEnabled = false,
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "b68aa427-caa9-4780-a0dd-d87fe61e1861",
                            TwoFactorEnabled = false,
                            UserName = "mohamed",
                            UserRole = "User"
                        },
                        new
                        {
                            Id = "10",
                            AccessFailedCount = 0,
                            Address = "1616 Lane, Village",
                            Age = 29,
                            CartID = 0,
                            ConcurrencyStamp = "384ed9be-c6c7-4218-9c24-f29ae28378aa",
                            Email = "alaa@example.com",
                            EmailConfirmed = false,
                            Gender = 0,
                            LockoutEnabled = false,
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "c7025b4c-1323-47c1-be24-067e85d1f73a",
                            TwoFactorEnabled = false,
                            UserName = "alaa",
                            UserRole = "User"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "1",
                            Name = "Admin",
                            NormalizedName = "ADMIN"
                        },
                        new
                        {
                            Id = "2",
                            Name = "User",
                            NormalizedName = "USER"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("CartItem", b =>
                {
                    b.HasOne("E_CommerceProject.DAL.Data.Models.Cart", "Cart")
                        .WithMany("CartItems")
                        .HasForeignKey("CartId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("E_CommerceProject.DAL.Data.Models.Product", "Product")
                        .WithMany("CartItems")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Cart");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("E_CommerceProject.DAL.Data.Models.Cart", b =>
                {
                    b.HasOne("E_CommerceProject.DAL.Data.Models.User", "User")
                        .WithOne("Cart")
                        .HasForeignKey("E_CommerceProject.DAL.Data.Models.Cart", "UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("E_CommerceProject.DAL.Data.Models.Order", b =>
                {
                    b.HasOne("E_CommerceProject.DAL.Data.Models.User", "User")
                        .WithMany("Orders")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("E_CommerceProject.DAL.Data.Models.OrderItem", b =>
                {
                    b.HasOne("E_CommerceProject.DAL.Data.Models.Order", "Order")
                        .WithMany("OrderItems")
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("E_CommerceProject.DAL.Data.Models.Product", "Product")
                        .WithMany("OrderItems")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Order");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("E_CommerceProject.DAL.Data.Models.Product", b =>
                {
                    b.HasOne("E_CommerceProject.DAL.Data.Models.Category", "Category")
                        .WithMany("Products")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Category");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("E_CommerceProject.DAL.Data.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("E_CommerceProject.DAL.Data.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("E_CommerceProject.DAL.Data.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("E_CommerceProject.DAL.Data.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("E_CommerceProject.DAL.Data.Models.Cart", b =>
                {
                    b.Navigation("CartItems");
                });

            modelBuilder.Entity("E_CommerceProject.DAL.Data.Models.Category", b =>
                {
                    b.Navigation("Products");
                });

            modelBuilder.Entity("E_CommerceProject.DAL.Data.Models.Order", b =>
                {
                    b.Navigation("OrderItems");
                });

            modelBuilder.Entity("E_CommerceProject.DAL.Data.Models.Product", b =>
                {
                    b.Navigation("CartItems");

                    b.Navigation("OrderItems");
                });

            modelBuilder.Entity("E_CommerceProject.DAL.Data.Models.User", b =>
                {
                    b.Navigation("Cart");

                    b.Navigation("Orders");
                });
#pragma warning restore 612, 618
        }
    }
}
